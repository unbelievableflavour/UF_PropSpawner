local propSpell = {}

function propSpell:Awake()
    self.scheId = null
	self.buttonHasBeenPressed = false

	self.player = CL.InteractCharacter.PlayerInstance
	self.textConfig = CL.GameDataMgr.GetData(typeof(CL.TextConfig)) 
	local leftHand = self.player.hands[1]
	local rightHand = self.player.hands[0]
	self.xButton = leftHand.inputs[CL.VRTKInputButton.ButtonType.ButtonOne]
	self.aButton = rightHand.inputs[CL.VRTKInputButton.ButtonType.ButtonOne]

	self.currentPropIndex = 0
	self.props = self:GetProps()
	self.propsCount = #(self.props)
end

function propSpell:GetProps()
	return self:dictionaryToTable(CL.UnlockContentConfig:GetConfig().unlockInfos);
end

function propSpell:dictionaryToTable(clrlist)	
    local t = {}
    local it = clrlist:GetEnumerator()
	local i = 0;
    while it:MoveNext() do
		if(string.find(it.Current.Key, "_PropSpawner_PROP_") == nil) then
			goto continue;
		end
		t[i] = it.Current.Key
		i = i+1;
		::continue::
    end
    return t
end

function propSpell:UpdateSkill()
    if self.hand == nil then
        return
    end

	local newSong = self.props[self.currentPropIndex]
	CL.ResourceMgr.Instantiate("FlyObj/" .. newSong .. "_Prop", self.spawnLocation.transform.position, self.spawnLocation.transform.rotation)
end

function propSpell:UpdateProp()
	actualSongListSize = 0
	for _ in pairs(self.props) do actualSongListSize = actualSongListSize + 1 end

	if (actualSongListSize == 0) then
        self.songTextPreview.text = "No props were found. Install some!"
        return
    end

	--SPAWN PROP DETAILS
	self:SpawnSong(self)	
	self:SpawnAlbumPreview(self)

	--SET PROPPREVIEW
	self.albumPreview.texture = self.spawnedSprite
	--self.songTextPreview.text = self.props[self.currentPropIndex]
	local songInfo = self.textConfig:GetDataByName(self.props[self.currentPropIndex])
	
	--print(self.props[self.currentPropIndex])
	self.songTextPreview.text = songInfo.Text[0]
end

function propSpell:SpawnSong(self)
	if (self.spawnedPreviewProp ~= nil) then
		CL.ResourceMgr.Destroy(self.spawnedPreviewProp)
	end

	local newSong = self.props[self.currentPropIndex]
	self.spawnedPreviewProp = CL.ResourceMgr.Instantiate("FlyObj/" .. newSong .. "_Preview", self.spawnLocation.transform.position, self.spawnLocation.transform.rotation)
	--print(self.spawnedPreviewProp.transform.name)
end

function propSpell:SpawnAlbumPreview(self)
	if (self.spawnedSprite ~= nil) then
		CL.ResourceMgr.Destroy(self.spawnedSprite)
	end

	local newSong = self.props[self.currentPropIndex]
	self.spawnedSprite = CL.ResourceMgr.Instantiate("ICon/" .. newSong)
end

function propSpell:NextSong()
	if (self.currentPropIndex == self.propsCount) then
		self.currentPropIndex = self.propsCount
		self:UpdateProp()
		return
	end

	self.currentPropIndex = self.currentPropIndex + 1
	self:UpdateProp()
end

function propSpell:PreviousSong()
	if (self.currentPropIndex == 0) then
		self.currentPropIndex = 0
		self:UpdateProp()
		return
	end

	self.currentPropIndex = self.currentPropIndex - 1
	self:UpdateProp()
end

function propSpell:StopSong()

end

function propSpell:OnSlot(slot, t)
    if (t) then
	    self.hand = slot:GetAttachedHand()

		local schedulerInterval = 0.02;
		local timeBeforeStopping = -1;
		local timeBeforeStarting = 0;

		self.scheId = CL.Scheduler.Create({},
		function(sche, t, s)
			self:listenForButtonInput()
			self:repositionProp()
		end
		, schedulerInterval, timeBeforeStopping, timeBeforeStarting)
		:SetUpdateChannel(CL.Scheduler.UpdateChannel.FixedUpdate)
		:IgnoreTimeScale(true)
		:SetOnStop(function(sche)
			print("Stopping input listener")
		end).actionId
    else
	    self.hand = nil
        CL.Scheduler.RemoveSchedule(self.scheId)
    end

	CL.Scheduler.Create(self, 
		function(sche, ts, ss)
			self.songPreview:SetActive(t)
		end
	)
end

function propSpell:repositionProp()
	if self.spawnedPreviewProp == nil then
		return
	end

	self.spawnedPreviewProp.transform.position = self.spawnLocation.transform.position
	self.spawnedPreviewProp.transform.rotation = self.spawnLocation.transform.rotation
end

function propSpell:listenForButtonInput()
	if self.buttonHasBeenPressed then
		if self.xButton.IsPressed then
			return
		end
		if self.aButton.IsPressed then
			return
		end

		self.buttonHasBeenPressed = false
		return
	end

	if self.xButton.IsPressed then
		self.buttonHasBeenPressed = true
		self:PreviousSong()
		return
	end

	if self.aButton.IsPressed then
		self.buttonHasBeenPressed = true
		self:NextSong()
		return
	end
end

function propSpell:OnDestroy()
    CL.Scheduler.RemoveSchedule(self.scheId)
end

return Class(Require("LuaScript/UF_PropSpawner_SpellBaseScript"), nil, propSpell)