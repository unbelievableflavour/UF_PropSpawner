
local table = {}

function table:Awake()
    self.scheId = null;
    self.schedulerInterval = 0.02;
    self.timeBeforeStopping = -1;
    self.timeBeforeStarting = 0;

	self.propFallback = self.prop;
	self.propPreviewFallback = self.propWithoutColliders;
	self.allWeapons = listToTable(CL.WeaponDataMgr.GetWeaponList());
	self.currentWeapon = 0;
end

function SpawnWeapon(self)
	if (self.spawnedItem ~= nil) then
		print("im gonna delete the old item!");
		CL.ResourceMgr.Destroy(self.spawnedItem);
	end

	local currentWeapon = self.allWeapons[self.currentWeapon]
	
	if(currentWeapon == nil) then
		self.currentWeapon = 0;
		SpawnWeapon(self, self.allWeapons[self.currentWeapon]);
		return;
	end

	self.weaponNameLabel.text = currentWeapon;
	self.weaponTypeLabel.text = "Prop";
    self.spawnedItem = CL.ResourceMgr.Instantiate("Weapon/" .. currentWeapon);

	if (self.spawnedItem == nil) then
		return;
	end

	if (self.spawnedItem.transform == nil) then
		return;
	end

	local completeProp = self.spawnedItem.transform:Find("CompleteProp");

	if (completeProp == nil) then
		-- NOT A PROP HACK
		self.weaponTypeLabel.text = "Weapon";
		self.prop = self.spawnedItem.transform;
		self.propWithoutColliders = self.propPreviewFallback;
		return;
	end

	completeProp.parent = nil;

	self.prop = completeProp:Find("Prop");
	self.propWithoutColliders = completeProp:Find("PropWithoutColliders");

	--self.prop.gameObject:SetActive(false);
	self.currentWeapon = self.currentWeapon + 1;
end

function listToTable(clrlist)
    local t = {}
    local it = clrlist:GetEnumerator()
	local i = 0;
    while it:MoveNext() do
--		if(it.Current == nil) then
--			goto continue;
--		end
--		if(it.Current == "UF_PropGun") then
--			print("i found the propgun!");
--			goto continue;
--		end
		if(string.find(it.Current, "^PROP_") == nil) then
			goto continue;
		end
		t[i] = it.Current
		i = i+1;

		print(it.Current);

		::continue::
    end
    return t
end

function table:Start()
    self.scheId = CL.Scheduler.Create({},
    function(sche, t, s)
		local player = CL.InteractCharacter.PlayerInstance;
        if player != nil then
			print("im here!");
            print(player.hands[0]);
        end

		if(self.prop == nil) then
			return;
		end

		self.propWithoutColliders.eulerAngles = UE.Vector3(0, self.propFallbackSpawnLocation.eulerAngles.z, 0);
		local fwd = self.raycastStartLocation:TransformDirection(UE.Vector3.forward);
		local isHit, hitInfo = UE.Physics.SphereCast(self.raycastStartLocation.position, 0.02, fwd, 50, CL.LayerDefine.EnvLayerMask.value)

		if hitInfo.distance < 1 then
			self:MovePreviewPropToFallbackLocation();
			do return end
		end

		if isHit then
			self.propWithoutColliders.position = hitInfo.point;
			self.line:SetPosition(0, self.propFallbackSpawnLocation.position);
			self.line:SetPosition(1, hitInfo.point);
		else
			self:MovePreviewPropToFallbackLocation();
		end
    end
    , self.schedulerInterval, self.timeBeforeStopping, self.timeBeforeStarting)
    :SetUpdateChannel(CL.Scheduler.UpdateChannel.FixedUpdate)
    :IgnoreTimeScale(true)
    :SetOnStop(function(sche)
        print("bye!")
    end).actionId
end

function table:MovePreviewPropToFallbackLocation()
	self.propWithoutColliders.position = self.propFallbackSpawnLocation.position;
	self.line:SetPosition(0, self.propFallbackSpawnLocation.position);
	self.line:SetPosition(1, self.raycastStartLocation.position);
end

function table:OnGrab(a, g)
	if(g) then
		SpawnWeapon(self);
	end

    self.propWithoutColliders.gameObject:SetActive(g);  
end

function table:UpdateSkill()
	local shootInterval = self.shootInterval or 0.1
	local st = self.shootTime or 0
	local ct = UE.Time.time
	if ct - st < shootInterval then
		return
	end	
	
	self:PullTrigger()	
end

function table:PullTrigger()
	if(self.prop == nil) then
		return;
	end

	self.prop.eulerAngles = UE.Vector3(0, self.propFallbackSpawnLocation.eulerAngles.z, 0);
	local fwd = self.raycastStartLocation:TransformDirection(UE.Vector3.forward);
	local isHit, hitInfo = UE.Physics.SphereCast(self.raycastStartLocation.position, 0.02, fwd, 50, CL.LayerDefine.EnvLayerMask.value)

	if hitInfo.distance < 1 then
		self.prop.position = self.propFallbackSpawnLocation.position;
		self.prop.gameObject:SetActive(true);
		do return end
	end

    if isHit then
		self.prop.position = hitInfo.point;
    else
		self.prop.position = self.propFallbackSpawnLocation.position;
	end
	self.prop.gameObject:SetActive(true);
end

function table:OnChargeRelease()
	if(self.prop == nil) then
		return;
	end

	print("do this");
	--CL.Scheduler.RemoveSchedule(self.scheId)
	--self.propPlacer:SetActive(false)
	
	self.prop = self.propFallback;
    self.propWithoutColliders.gameObject:SetActive(false);  
	self.propWithoutColliders = self.propPreviewFallback;
end

function table:OnDestroy()
    CL.Scheduler.RemoveSchedule(self.scheId)
end

return Class(nil,nil,table)